\documentclass{report}

\usepackage[T2A]{fontenc}
\usepackage[utf8]{luainputenc}
\usepackage[english, russian]{babel}
\usepackage[pdftex]{hyperref}
\usepackage[14pt]{extsizes}
\usepackage{listings}
\usepackage{color}
\usepackage{geometry}
\usepackage{enumitem}
\usepackage{multirow}
\usepackage{graphicx}
\usepackage{indentfirst}

\geometry{a4paper,top=2cm,bottom=3cm,left=2cm,right=1.5cm}
\setlength{\parskip}{0.5cm}
\setlist{nolistsep, itemsep=0.3cm,parsep=0pt}

\lstset{language=C++,
		basicstyle=\footnotesize,
		keywordstyle=\color{blue}\ttfamily,
		stringstyle=\color{red}\ttfamily,
		commentstyle=\color{green}\ttfamily,
		morecomment=[l][\color{magenta}]{\#}, 
		tabsize=4,
		breaklines=true,
  		breakatwhitespace=true,
  		title=\lstname,       
}

\makeatletter
\renewcommand\@biblabel[1]{#1.\hfil}
\makeatother

\begin{document}

\begin{titlepage}

\begin{center}
Министерство науки и высшего образования Российской Федерации
\end{center}

\begin{center}
Федеральное государственное автономное образовательное учреждение высшего образования \\
Национальный исследовательский Нижегородский государственный университет им. Н.И. Лобачевского
\end{center}

\begin{center}
Институт информационных технологий, математики и механики
\end{center}

\vspace{4em}

\begin{center}
\textbf{\LargeОтчет по лабораторной работе} \\
\end{center}
\begin{center}
\textbf{\Large«Построение выпуклой оболочки – проход Джарвиса.»} \\
\end{center}

\vspace{4em}

\newbox{\lbox}
\savebox{\lbox}{\hbox{text}}
\newlength{\maxl}
\setlength{\maxl}{\wd\lbox}
\hfill\parbox{7cm}{
\hspace*{5cm}\hspace*{-5cm}\textbf{Выполнил:} \\ студент группы 381806-1 \\ Шагов М. А.\\
\\
\hspace*{5cm}\hspace*{-5cm}\textbf{Проверил:}\\ доцент кафедры МОСТ, \\ кандидат технических наук \\ Сысоев А. В.\\
}
\vspace{\fill}

\begin{center} Нижний Новгород \\ 2020 \end{center}

\end{titlepage}

\setcounter{page}{2}

% Содержание
\tableofcontents
\newpage

% Введение
\section*{Введение}
\addcontentsline{toc}{section}{Введение}
Задача построения выпуклой оболочки имеет давнюю историю. Она является одной из первых задач вычислительной геометрии, с которой начала зарождаться эта наука.  Задача имеет очень огромное количество приложений и широко используется для решения других задач вычислительной геометрии. В настоящее время известно достаточно большое число алгоритмов построения выпуклой оболочки. Выпуклую оболочку объекта можно строить различными аналитическими способами, которые в основном являются сложными. Ниже предлагается один из способов построения выпуклой оболочки на языке C++ с использованием технологий MPI.
\newpage

% Постановка задачи
\section*{Постановка задачи}
\addcontentsline{toc}{section}{Постановка задачи}
В данной работе необходимо реализовать построение выпуклой оболочки проходом Джарвиса для точек $p_1, p_2, ..., p_n,$ где $n \ge 1$. Для этого необходимо реализовать 2 версии программы, последовательную и параллельную(выпуклая оболочка строилась правильно для произвольного числа процессов, выполняющих ее построение).
\par
Также нужно провести вычислительные эксперименты, сравнив время работы параллельного и последовательного алгоритмов для разных входных данных и на разном количестве процессов, сделав выводы об эффективности параллельной версии.
\par
Также необходимо проверить корректность работы алгоритма программы для разного количества процессов, и графически показать построение выпуклой оболочки. 
\newpage

% Метод решения
\section*{Описание алгоритма}
\addcontentsline{toc}{section}{Описание алгоритма}
Пусть дано множество точек $P=\{\,p_1, p_2, ..., p_n\}$. В качестве начальной берётся самая левая нижняя точка $p_1$ (её можно найти за $O(n)$ обычным проходом по всем точкам), она точно является вершиной выпуклой оболочки. Следующей точкой  $p_2$ берём такую точку, которая имеет наименьший положительный полярный угол относительно точки $p_1$, как начала координат. После этого для каждой точки $p_i$, где $(2<i<=|P|)$, против часовой стрелки ищется такая точка $p_{i+1}$, путём нахождения за $O(n)$ среди оставшихся точек (+ самая левая нижняя), в которой будет образовываться наибольший угол между прямыми $p_{i-1} p_i$ и $p_{i}p_{i+1}$. Она и будет следующей вершиной выпуклой оболочки. Сам угол при этом не ищется, а ищется только его косинус через скалярное произведение между лучами  $p_{i-1}p_{i}$ и $p_{i}p'_{i+1}$, где  $p_{i}$ — последний найденный минимум,  $p_{i-1}$ — предыдущий минимум(претедент), а $p'_{i+1}$ — претендент на следующий минимум. Новым минимумом будет та точка, в которой косинус будет принимать наименьшее значение (чем меньше косинус, тем больше его угол). Нахождение вершин выпуклой оболочки продолжается до тех пор, пока $p_{i+1}\neq p_{1}$. В тот момент, когда следующая точка в выпуклой оболочке совпала с первой, алгоритм останавливается — выпуклая оболочка построена.
\newpage

% Схема распараллеливания
\section*{Схема распараллеливания}
\addcontentsline{toc}{section}{Схема распараллеливания}
Для распараллеливания алгоритма построения выпуклой оболочки необходимо разделить изначальный массив точек на блоки. Количество блоков равно числу процессов. Если размер изначального массива не делится нацело на число процессов, то останутся точки которые не войдут в блок, их количество равно остатку от деления. Для решения этой проблемы учитываем эти точки в блоке корневого процесса.
\par
Далее корневой процесс раздает блоки с точками каждому процессу и каждый процесс локально ищет самую крайнюю левую точку в своем блоке, передавая ее в корневой процесс для обработки.
\par
После нахождения самой левой точки, в каждом процессе выполняется проход Джарвиса. Завешив проход, процессы отправляют найденную точку на корневой процесс, и в корневом еще раз запускается проход Джарвиса. Таким образом, получаем точку, которая принадлежит выпуклой оболочке.  
\newpage

% Описание программной реализации
\section*{Описание программной реализации}
\addcontentsline{toc}{section}{Описание программной реализации}
Алгоритм последовательного построения выпуклой оболочки вызывается при помощи функции:
\begin{lstlisting}
std::vector<Point> buildConvexHull(const std::vector<Point> &mas);
\end{lstlisting}
\par Входным параметром функции является вектор точек, по которым нужно построить выпуклую оболочку. Выходными данными является вектор точек, составляющих в выпуклую оболочку.
\par Алгоритм параллельного построения выпуклой оболочки вызывается при помощи функции:
\begin{lstlisting}
std::vector<Point> buildConvexHullParallel(const std::vector<Point> &mas);
\end{lstlisting}
\par Входные и выходные данные аналогичны последовательному варианту.
\par Обе функции вызывает внутри себя несколько других функций, перечисленных ниже.
\par Данная функция ищет самую крайнюю левую точку в переданном массиве и возвращает её индекс:
\begin{lstlisting}
size_t searchMinPoint(const std::vector<Point> &mas);
\end{lstlisting}
\par Данная функция является параллельной версией поиска самой крайней левой точки:
\begin{lstlisting}
Point searchMinPointParallel(const std::vector<Point> &mas, int rank, int procCount);
\end{lstlisting}
\par Входным параметром является ссылка на неизменяемый вектор, содержащий точки, ранг процесса, и их количество. Выходные параметры самая крайняя левая точка.
\par Данная функция проверяет, входил ли точка в выпуклую оболочку:
\begin{lstlisting}
bool pointCheck(const Point& back, const Point& current, const Point& challenger);
\end{lstlisting}
\par Входным параметром является ссылки на неизменяемые точки. Функция возврашает true, если претендент лучше нашего предыдущего претедента.
\par Данная функция проверяет, генерирует вектор точек:
\begin{lstlisting}
bool pointCheck(const Point& back, const Point& current, const Point& challenger);
\end{lstlisting}
\par Входным параметром является размер вектора. Возвращает функция сгенерированный вектор точек.
\newpage

% Подтверждение корректности
\section*{Подтверждение корректности}
\addcontentsline{toc}{section}{Подтверждение корректности}
Для подтверждения корректности в программе представлен набор тестов, разработанных с помощью использования Google C++ Testing Framework.
\par Набор представляет из себя тесты, корректность вычислений (проверка на совпадение результатов работы параллельной программы и последовательной), а также эффективность (вычисление и сравнение времени работы последовательной и параллельной реализации).
\newpage

% Результаты экспериментов
\section*{Результаты экспериментов}
\addcontentsline{toc}{section}{Результаты экспериментов}
Вычислительные эксперименты для оценки алгоритма построения выпуклой оболочки проходом Джарвиса проводились на оборудовании со следующей аппаратной конфигурацией:

\begin{itemize}
\item Процессор: Intel Core i5-4210H CPU @ 2.90GHz, ядер: 2;
\item Оперативная память: 4096 MBytes (DDR3), 799.0 MHz;
\item ОС: Microsoft Windows 7 Максимальная 64-bit.
\end{itemize}

\par Для проведения экспериментов производилась сортировка векторов размером \verb|1 000 000| значений каждый. 
\par Результаты экспериментов представлены в Таблице 1.

\begin{table}[!h]
\caption{Результаты вычислительных экспериментов}
\centering
\begin{tabular}{llllll}
Количество процессов & Параллельная & Последовательная & Ускорение  \\
1        & 5.45061        & 5.40978      & 0.99      \\
2        & 2.31332        & 5.11423      & 2.21       \\
3        & 2.31384        & 4.83600      & 2.09      \\
4        & 2.30835        & 5.12937      & 2,22       \\
5        & 2.02874        & 4.18653      & 2.06       \\
6        & 2.07917        & 3.80051      & 2.03      \\
7        & 2.12585        & 4.33114      & 2.04      \\
8        & 2.00752        & 4.22901      & 2.01      
\end{tabular}
\end{table}

\par Результаты полученные в ходе вычислительных экспериментов действительно подтверждают эффективность параллельной сортировки в сравнении с последовательной. Дальнейшее увеличение количества процессоров не имеет смысла, так как увеличиваются накладные расходы. Поэтому более выгодным будет использование 2, 4 процессоров для данной аппаратной кофигурации.
\newpage

% Заключение
\section*{Заключение}
\addcontentsline{toc}{section}{Заключение}
В ходе выполнения лабораторной работы были реализованы последовательная и параллельная реализации алгоритма построения выпуклой оболочки с помощью прохода Джарвиса.
\par Задача работы была успешно достигнута, поскольку результаты проведенных экспериментов по оценке эффективности показывают, что параллельная реализация работает быстрее, чем последовательная.
\par Кроме того, были написаны тесты с использованием Google Testing Framework, необходимые для подтверждения корректности работы программы.
\newpage

% Список литературы
\begin{thebibliography}{1}
\addcontentsline{toc}{section}{Список литературы}
\bibitem{Gergel} Гергель В. П., Стронгин Р. Г. Основы параллельных вычислений для многопроцессорных вычислительных систем. – 2003. (дата обращения: 4.12.2020)
\bibitem{wikishell} Википедия: Сортировка Шелла [Электронный ресурс] // URL: \url {https://en.wikipedia.org/wiki/Gift_wrapping_algorithm} (дата обращения: 4.12.2020)
\end{thebibliography}
\newpage

% Приложение
\section*{Приложение}
\addcontentsline{toc}{section}{Приложение}
\begin{lstlisting}
// Copyright 2020 Shagov Maksim
#include <mpi.h>
#include <gtest-mpi-listener.hpp>
#include <gtest/gtest.h>
#include <vector>
#include <iostream>
#include "../../../modules/task_3/shagov_m_gift_warpping_algorithm/gift_warpping_algorithm.h"

TEST(Parallel_Gift_Warpping_Algorithm_MPI, Test_Points_Size_8) {
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    const int count_size_string = 8;
    std::vector<Point> points_1(count_size_string);
    std::vector<Point> points_2(count_size_string);
    std::vector<int> points_1_x;
    std::vector<int> points_1_y;
    std::vector<int> points_2_x;
    std::vector<int> points_2_y;

    if (rank == 0) {
        points_1[0].x = 82; points_1[0].y = 24;
        points_1[1].x = 1; points_1[1].y = 17;
        points_1[2].x = 81; points_1[2].y = 80;
        points_1[3].x = 13; points_1[3].y = 79;
        points_1[4].x = 23; points_1[4].y = 80;
        points_1[5].x = 87; points_1[5].y = 86;
        points_1[6].x = 77; points_1[6].y = 82;
        points_1[7].x = 64; points_1[7].y = 41;
        points_2 = points_1;
    }

    points_1 = buildConvexHullParallel(points_1);

    if (rank == 0) {
        for (size_t i = 0; i < points_1.size(); i++) {
            points_1_x.push_back(points_1[i].x);
            points_1_y.push_back(points_1[i].y);
        }
        double startT = MPI_Wtime();
        points_2 = buildConvexHull(points_2);
        double endT = MPI_Wtime();
        for (size_t i = 0; i < points_2.size(); i++) {
            points_2_x.push_back(points_2[i].x);
            points_2_y.push_back(points_2[i].y);
        }
        std::cout << "Consistent time: " << endT - startT << std::endl;
        ASSERT_EQ(points_1_x, points_2_x);
        ASSERT_EQ(points_1_y, points_2_y);
    }
}

TEST(Parallel_Gift_Warpping_Algorithm_MPI, Test_Cude_Size_4) {
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    const int count_size_string = 4;
    std::vector<Point> points_1(count_size_string);
    std::vector<Point> points_2(count_size_string);
    std::vector<int> points_1_x;
    std::vector<int> points_1_y;
    std::vector<int> points_2_x;
    std::vector<int> points_2_y;

    if (rank == 0) {
        points_1[0].x = 1; points_1[0].y = 1;
        points_1[1].x = 1; points_1[1].y = 10;
        points_1[2].x = 10; points_1[2].y = 1;
        points_1[3].x = 10; points_1[3].y = 10;
        points_2 = points_1;
    }

    points_1 = buildConvexHullParallel(points_1);

    if (rank == 0) {
        for (size_t i = 0; i < points_1.size(); i++) {
            points_1_x.push_back(points_1[i].x);
            points_1_y.push_back(points_1[i].y);
        }
        double startT = MPI_Wtime();
        points_2 = buildConvexHull(points_2);
        double endT = MPI_Wtime();
        for (size_t i = 0; i < points_2.size(); i++) {
            points_2_x.push_back(points_2[i].x);
            points_2_y.push_back(points_2[i].y);
        }
        std::cout << "Consistent time: " << endT - startT << std::endl;
        ASSERT_EQ(points_1_x, points_2_x);
        ASSERT_EQ(points_1_y, points_2_y);
    }
}

TEST(Parallel_Gift_Warpping_Algorithm_MPI, Test_Random_Vector_Size_100) {
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    const int count_size_string = 100;
    std::vector<Point> points_1(count_size_string);
    std::vector<Point> points_2(count_size_string);
    std::vector<int> points_1_x;
    std::vector<int> points_1_y;
    std::vector<int> points_2_x;
    std::vector<int> points_2_y;

    if (rank == 0) {
        points_1 = createRandomPoints(count_size_string);
        points_2 = points_1;
    }

    points_1 = buildConvexHullParallel(points_1);

    if (rank == 0) {
        for (size_t i = 0; i < points_1.size(); i++) {
            points_1_x.push_back(points_1[i].x);
            points_1_y.push_back(points_1[i].y);
        }
        double startT = MPI_Wtime();
        points_2 = buildConvexHull(points_2);
        double endT = MPI_Wtime();
        for (size_t i = 0; i < points_1.size(); i++) {
            points_2_x.push_back(points_1[i].x);
            points_2_y.push_back(points_1[i].y);
        }
        std::cout << "Consistent time: " << endT - startT << std::endl;
        ASSERT_EQ(points_1_x, points_2_x);
        ASSERT_EQ(points_1_y, points_2_y);
    }
}

TEST(Parallel_Gift_Warpping_Algorithm_MPI, Test_Random_Vector_Size_1000) {
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    const int count_size_string = 1000;
    std::vector<Point> points_1(count_size_string);
    std::vector<Point> points_2(count_size_string);
    std::vector<int> points_1_x;
    std::vector<int> points_1_y;
    std::vector<int> points_2_x;
    std::vector<int> points_2_y;

    if (rank == 0) {
        points_1 = createRandomPoints(count_size_string);
        points_2 = points_1;
    }

    points_1 = buildConvexHullParallel(points_1);

    if (rank == 0) {
        for (size_t i = 0; i < points_1.size(); i++) {
            points_1_x.push_back(points_1[i].x);
            points_1_y.push_back(points_1[i].y);
        }
        double startT = MPI_Wtime();
        points_2 = buildConvexHull(points_2);
        double endT = MPI_Wtime();
        for (size_t i = 0; i < points_1.size(); i++) {
            points_2_x.push_back(points_1[i].x);
            points_2_y.push_back(points_1[i].y);
        }
        std::cout << "Consistent time: " << endT - startT << std::endl;
        ASSERT_EQ(points_1_x, points_2_x);
        ASSERT_EQ(points_1_y, points_2_y);
    }
}

TEST(Parallel_Gift_Warpping_Algorithm_MPI, Test_Random_Vector_Size_1000000) {
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    const int count_size_string = 1000000;
    std::vector<Point> points_1(count_size_string);
    std::vector<Point> points_2(count_size_string);
    std::vector<int> points_1_x;
    std::vector<int> points_1_y;
    std::vector<int> points_2_x;
    std::vector<int> points_2_y;

    if (rank == 0) {
        points_1 = createRandomPoints(count_size_string);
        points_2 = points_1;
    }

    points_1 = buildConvexHullParallel(points_1);

    if (rank == 0) {
        for (size_t i = 0; i < points_1.size(); i++) {
            points_1_x.push_back(points_1[i].x);
            points_1_y.push_back(points_1[i].y);
        }
        double startT = MPI_Wtime();
        points_2 = buildConvexHull(points_2);
        double endT = MPI_Wtime();
        for (size_t i = 0; i < points_1.size(); i++) {
            points_2_x.push_back(points_1[i].x);
            points_2_y.push_back(points_1[i].y);
        }
        std::cout << "Consistent time: " << endT - startT << std::endl;
        ASSERT_EQ(points_1_x, points_2_x);
        ASSERT_EQ(points_1_y, points_2_y);
    }
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    MPI_Init(&argc, &argv);

    ::testing::AddGlobalTestEnvironment(new GTestMPIListener::MPIEnvironment);
    ::testing::TestEventListeners& listeners = ::testing::UnitTest::GetInstance()->listeners();

    listeners.Release(listeners.default_result_printer());
    listeners.Release(listeners.default_xml_generator());

    listeners.Append(new GTestMPIListener::MPIMinimalistPrinter);
    return RUN_ALL_TESTS();
}
\end{lstlisting}
\begin{lstlisting}
// Copyright 2020 Shagov Maksim
#ifndef MODULES_TASK_3_SHAGOV_M_GIFT_WARPPING_ALGORITHM_GIFT_WARPPING_ALGORITHM_H_
#define MODULES_TASK_3_SHAGOV_M_GIFT_WARPPING_ALGORITHM_GIFT_WARPPING_ALGORITHM_H_
#include <mpi.h>
#include <vector>
#include <iostream>
#include <ctime>
#include <random>

struct Point {
    int x, y;
    Point() = default;
    Point(int X, int Y) {
        x = X;
        y = Y;
    }

    const Point operator=(const Point& point) {
        x = point.x;
        y = point.y;
        return *this;
    }

    bool operator!=(const Point& point) {
        return ((x != point.x) || (y != point.y));
    }

    bool operator==(const Point& point) {
        return ((x == point.x) && (y == point.y));
    }
};

std::vector<Point> createRandomPoints(size_t size);
size_t searchMinPoint(const std::vector<Point> &mas);
Point searchMinPointParallel(const std::vector<Point> &mas, int rank, int procCount);
std::vector<Point> buildConvexHullParallel(const std::vector<Point> &mas);
std::vector<Point> buildConvexHull(const std::vector<Point> &mas);
bool pointCheck(const Point& back, const Point& current, const Point& challenger);
#endif  // MODULES_TASK_3_SHAGOV_M_GIFT_WARPPING_ALGORITHM_GIFT_WARPPING_ALGORITHM_H_
\end{lstlisting}
\begin{lstlisting}
// Copyright 2020 Shagov Maksim
#include <vector>
#include "../../../modules/task_3/shagov_m_gift_warpping_algorithm/gift_warpping_algorithm.h"

std::vector<Point> createRandomPoints(size_t size) {
    std::vector<Point> result(size);
    std::random_device rd;
    std::mt19937 mersenne(rd());
    std::uniform_real_distribution<> urd(-100000.0, 100000.0);
    for (size_t i = 0; i < size; i++) {
        result[i].x = static_cast<int>(urd(mersenne));
        result[i].y = static_cast<int>(urd(mersenne));
    }
    return result;
}

bool pointCheck(const Point& back, const Point& current, const Point& challenger) {
    double x;

    if ((challenger.x - current.x) == 0) {
        if (challenger.x == back.x) {
            if ((challenger.y - current.y) > 0) {
                if (challenger.y > back.y) {
                    return true;
                } else {
                    return false;
                }
            }
            if ((challenger.y - current.y) < 0) {
                if (challenger.y < back.y) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        x = challenger.x;
    } else {
        if ((challenger.y - current.y) == 0) {
            x = back.x;
            if (challenger.x > current.x) {
                if (challenger.y == back.y) {
                    if (back.x > challenger.x) {
                        return false;
                    } else {
                        if ((back.x == challenger.x) && (challenger.y > back.y)) {
                            return false;
                        }
                        return true;
                    }
                } else {
                    return challenger.y <= back.y;
                }
            } else {
                if (challenger.x < current.x) {
                    if (challenger.y == back.y) {
                        if (back.x > challenger.x) {
                            return true;
                        } else {
                            if ((back.x == challenger.x) && (back.y > challenger.y)) {
                                return true;
                            }
                            return false;
                        }
                    } else {
                        return !(challenger.y <= back.y);
                    }
                }
            }
        } else {
            double tan1 = (static_cast<double>(challenger.y - current.y)) /
            (static_cast<double>(challenger.x - current.x));
            double tan2 = tan1 + 1.0;
            if ((back.x - current.x) != 0) {
                tan2 = (back.y - current.y) / (back.x - current.x);
            }
            if (tan1 == tan2) {
                if (challenger.y > current.y) {
                    return challenger.y > back.y;
                } else {
                    return challenger.y < back.y;
                }
            } else {
                x = static_cast<double>(back.y - challenger.y) /
                tan1 + static_cast<double>(challenger.x);
            }
        }
    }
    if (challenger.y > current.y) {
        if (challenger.x > current.x) {
            return !(x <= back.x);
        } else {
            return x > back.x;
        }
    } else {
        if ((challenger.y - current.y) != 0) {
            return x <= back.x;
        }
    }
    return false;
}

size_t searchMinPoint(const std::vector<Point>& mas) {
    size_t base = 0;
    for (size_t i = 0; i < mas.size(); i++) {
        if (mas[base].x > mas[i].x) {
            base = i;
        } else {
            if ((mas[base].x == mas[i].x) && (mas[base].y > mas[i].y)) {
                base = i;
            }
        }
    }
    return base;
}

Point searchMinPointParallel(const std::vector<Point>& mas, int rank, int procCount) {
    Point local_left_point = mas[searchMinPoint(mas)];
    std::vector<Point> local_points(procCount);
    MPI_Gather(&local_left_point, 2, MPI_INT, &local_points[0], 2, MPI_INT, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        local_left_point = local_points[searchMinPoint(local_points)];
    }
    MPI_Bcast(&local_left_point, 2, MPI_INT, 0, MPI_COMM_WORLD);
    return local_left_point;
}

std::vector<Point> buildConvexHullParallel(const std::vector<Point>& mas) {
    double startT = 0;
    int rank, procCount;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &procCount);
    if (rank == 0) {
        startT = MPI_Wtime();
    }
    int elements_count = static_cast<int>(mas.size());
    if ((elements_count == 1) || (elements_count == 2)) {
        return mas;
    }
    int elements_part_count = elements_count / procCount;
    int remainder = elements_count % procCount;
    if ((elements_part_count == 1) || (static_cast<size_t>(procCount) > mas.size())) {
        if (rank == 0) {
            return buildConvexHull(mas);
        } else {
            return mas;
        }
    }
    int* revcount = new int[procCount];
    int* displs = new int[procCount];
    revcount[0] = 2 * (elements_part_count + remainder);
    displs[0] = 0;
    for (int i = 1; i < procCount; i++) {
        revcount[i] = elements_part_count * 2;
        displs[i] = (elements_part_count * i + remainder) * 2;
    }
    std::vector<Point> part_vector(rank == 0 ? elements_part_count + remainder : elements_part_count);
    MPI_Scatterv(&mas[0], revcount, displs, MPI_INT, &part_vector[0], revcount[rank], MPI_INT, 0, MPI_COMM_WORLD);
    Point left_point = searchMinPointParallel(part_vector, rank, procCount);
    std::vector<Point> convex_hull;
    convex_hull.push_back(left_point);
    std::vector<Point> local_points(procCount);
    Point next;
    do {
        next = part_vector[0];
        if (next == convex_hull.back()) {
            next = part_vector[1];
        }
        for (int i = 0; i < static_cast<int>(part_vector.size()); i++) {
            if ((part_vector[i] == convex_hull.back()) || (convex_hull.back() == next)) {
                continue;
            }
            if (pointCheck(convex_hull.back(), next, part_vector[i]) || (part_vector[i] == next)) {
                next = part_vector[i];
            }
        }
        MPI_Gather(&next, 2, MPI_INT, &local_points[0], 2, MPI_INT, 0, MPI_COMM_WORLD);
        if (rank == 0) {
            for (int i = 0; i < static_cast<int>(local_points.size()); i++) {
                if (pointCheck(convex_hull.back(), next, local_points[i])) {
                    next = local_points[i];
                }
            }
        }
        MPI_Bcast(&next, 2, MPI_INT, 0, MPI_COMM_WORLD);
        convex_hull.push_back(next);
        if (convex_hull.size() == mas.size()) {
            break;
        }
    } while (convex_hull.back() != left_point);
    if (rank == 0) {
        double endT = MPI_Wtime();
        std::cout << "MPI time: " << endT - startT << std::endl;
    }
    return convex_hull;
}

std::vector<Point> buildConvexHull(const std::vector<Point>& mas) {
    if ((mas.size() == 1) || (mas.size() == 2)) {
        return mas;
    }
    std::vector<Point> part_vector(mas);
    Point left_point = part_vector[searchMinPoint(part_vector)];
    std::vector<Point> convex_hull;
    convex_hull.push_back(left_point);
    Point next;
    do {
        next = part_vector[0];
        if (next == convex_hull.back()) {
            next = part_vector[1];
        }
        for (int i = 0; i < static_cast<int>(part_vector.size()); i++) {
            if ((part_vector[i] == convex_hull.back()) || (convex_hull.back() == next)) {
                continue;
            }
            if ((part_vector[i] == next) || pointCheck(convex_hull.back(), next, part_vector[i])) {
                next = part_vector[i];
            }
        }
        convex_hull.push_back(next);
        if (convex_hull.size() == mas.size()) {
            break;
        }
    } while (convex_hull.back() != left_point);

    return convex_hull;
}
\end{lstlisting}
\end{document}
